
// Junior
// Общие:

// 1. Какие методы HTTP-запросов вы знаете?
// Метод GET, POST, PUT, DELETE

// 2. Какие версии HTTP-протокола вам известны?
// HTTP/1.0 и HTTP/1.1 и HTTP/2.0 и HTTP/3.0. современный HTTP/3.0  поддерживается только на серверах и не поддерживается на клиенте.

// 3. Какие знаете коды ответа (состояния) HTTP?
// 200 OK, 404 Not Found, 500 Internal Server Error, etc.

// 4. Что такое Cross-Origin Resource Sharing? Как устранить проблемы с CORS?
// CORS - протокол для обмена данными между двумя или более приложениями на одном или нескольких серверах. Он позволяет приложениям обмениваться данными между собой без необходимости подключения к одному и тому же серверу. Для устранения проблемы CORS необходимо добавить в заголовок запроса Access-Control-Allow-Origin: * или Access-Control-Allow-Origin: <путь к приложению>.

// 5. Что такое cookie?
// Куки - контейнер для данных, которые передаются в запросе и получаются в ответе. Куки позволяют приложению запоминать информацию о пользователе и повторно использовать ее в течение одной сессии.

// 6. Какой максимальный размер cookie?
// Максимальный размер cookie зависит от настроек браузера. Например, в Chrome максимальный размер cookie составляет 4 Кб.

// 7. Что означает директива use strict?
// Директива use strict запрещает опечатки в коде. Директива должна быть первой в скрипте. 

// 8. Чем JS отличается при работе на front-end и back-end?
// Отличие между front-end и back-end в том, что в front-end приложение отображается на экране пользователя, а в back-end приложение выполняет действия на сервере.

// 9. Что такое статическая и динамическая типизации?
// Статическая типизация - типизация, которая определяет тип переменной по ее значению. Динамическая типизация - типизация, которая определяет тип переменной по ее использованию. например при статической типизации переменная может быть только числом, а при динамической типизации переменная может быть числом или строкой. пример динамической типизации: 
// var a = 5; var b = "5"; console.log(a + b); // выведет 55

// 10. Как клиент взаимодействует с сервером?
// Клиент отправляет запрос на сервер и получает ответ.

// 11. Что такое REST?
// REST - это протокол для обмена данными между клиентом и сервером. Пример протокола: GET /users/1 или POST /users/1. Пример протокола: GET /users/1?name=John или POST /users/1?name=John.

// 12. Объяснить понятие мутабельность/иммутабельность? Какие типы являются мутабельными и наоборот?
// Мутабельными являются объекты, которые могут изменяться во время выполнения программы. Например, массивы, объекты, функции. Иммутабельные являются строки, числа, булевые значения.

// 13. Как искать ошибки в коде?
// Для поиска ошибок в коде используются проверки на нулл или не нулл. Пример: if (a == null) { console.log("a is null"); } 
// так же в браузере есть инструменты для поиска ошибок. Дебагеры. Пример: chrome://inspect/

// 14. Каких известных людей из мира JS знаете?
// Джон Резиг -  известен как создатель jQuery — пожалуй, самой популярной в мире JavaScript-библиотеки.
// Джон Коннергейт - известен как создатель Node.js — пожалуй, самой популярной в мире JavaScript-библиотеки.
// Эван Ю его главном детище — Vue.js. Этот фреймворк сейчас успешно конкурирует с такими монстрами, как Angular React

// 15. Какие существуют типы данных в JS?
// Типы данных в JS: string, number, boolean, null, undefined, object, simbol, bigint.

// 16. Как проверить, является ли объект массивом?
// Можно проверить через метод Array.isArray(obj). Пример: Console.log( Array.isArray([]) ); // true

// 17. Как проверить, является ли число конечным?
// Можно проверить через метод Number.isFinite(obj). Пример: Console.log( Number.isFinite(Infinity) ); // false

// 18. Как проверить, что переменная равна NaN?
// Можно проверить через метод Number.isNaN(obj). Пример: Console.log( Number.isNaN(NaN) ); // true

// 19. Чем отличается поведение isNaN() и Number.isNaN()?
// Поведение isNaN() отличается от Number.isNaN() тем, что он проверяет на неправильное значение, а Number.isNaN() проверяет на неправильное значение или на нуль. Пример: Console.log( isNaN(NaN) ); // true

// 20. Сравните ключевые слова var, let, const.
// Ключевое слово var означает переменную, которая обладает глобальной областью видимости.
// Ключевое слово let означает переменную, которая обладает локальной областью видимости. 
// Ключевое слово const означает константу, которая обладает локальной областью видимости. Константа не может быть изменена.

// 21. Что такое область видимости?
// Область видимости определяет какие переменные могут быть доступны внутри блока кода. Пример: 
// let x = 10; if (x > 0) { let x = 20; } console.log(x); // 10 

// 23. Для чего предназначены методы setTimeout и setInterval?
// Метод setTimeout вызывает функцию через заданное количество миллисекунд.
// Метод setInterval вызывает функцию через заданное количество миллисекунд пока не будет вызван метод clearInterval.

// 24. Сравните подходы работы с асинхронным кодом: сallbacks vs promises vs async / await.
// отличие функции callback от промиса в том, что промис возвращает объект, а callback нет.
// отличие функции async от функции callback в том, что функция async возвращает объект, а callback нет.

// 25. Можно ли записывать новые свойства / функции в прототипы стандартных классов (Array, Object и т. д.)?
// Да, можно. Пример: Array.prototype.push = function() {};
// Как обезопасить себя, если нужно расширить прототип?
// Можно использовать метод Object.create(). Пример: let arr = Object.create(Array.prototype); данный спсоб позволяет нам предотвратить перезапись прототипа.

// 26. Назовите методы массивов, какие помните, и скажите, для чего они нужны.
// Метод push() добавляет новый элемент в конец массива.
// Метод pop() удаляет последний элемент массива.
// Метод shift() удаляет первый элемент массива.
// Метод unshift() добавляет новый элемент в начало массива.

// 27. Какие методы перебора массива знаете? В чем их отличие?
// Метод forEach() перебирает массив и вызывает функцию для каждого элемента. Функция принимает два параметра: индекс и значение.
// Метод map() перебирает массив и возвращает новый массив. Функция принимает два параметра: индекс и значение.
// Метод filter() перебирает массив и возвращает новый массив. Функция принимает два параметра: индекс и значение.
// Метод reduce() перебирает массив и возвращает один объект. Функция принимает три параметра: индекс, значение и результат.

// 28. Как работают операторы присваивания / сравнения / строчные / арифметические / битовые и т. д.?
// Операторы присваивания используются для присваивания значения переменной. Операторы сравнения используются для сравнения значений. Операторы строчные используются для сравнения значений. Операторы арифметические используются для вычисления значений. Операторы битовые используются для вычисления значений.

// 29. Опишите назначение и принципы работы с коллекциями Map и Set.
// Коллекция Map используется для хранения пар ключ-значение. Ключ может быть любого типа, но он должен быть уникальным. 
// Коллекция Set используется для хранения значений, которые не могут быть повторно использованы. Значение может быть любого типа.

// 30. Что означает глубокая (deep) и поверхностная (shallow) копия объекта? Как сделать каждую из них?
// Глубокая копия объекта создает новый объект, который имеет все поля и методы оригинального объекта. 
// спсоб глубокой копии объекта: JSON.parse(JSON.stringify(obj)). cloneDeep(obj) метод библиотеки lodash.
// способ поверхностной копии объекта: Object.assign({}, obj). objNew = {...obj}

// Функции:

// 31. Какая разница между декларацией функции (function declaration) и функциональным выражением (function expression)?
// function declaration  можно вызвать до ее объявления. 
// function expression можно вызвать только после ее объявления.

// 32. Что такое анонимная функция?
// Анонимная функция - это функция, которая не имеет имени. Это означает, что она не может быть вызвана другими функциями.
// пример анонимной функции: 
// let func = function(a, b) { return a + b; }  // анонимная функция
// console.log(func(1, 2));

// 33. Расскажите о стрелочных функциях (arrow function). В чем заключаются отличия стрелочных функций от обычных?
// Отличие стрелочных функций от обычных в том, что у них нет this. Также стрелочные функции в силу своего синтаксиса анонимны, если не присвоить их переменной.
// Пример стрелочной функции: const func = (a, b) => a + b;
// Также из-за отсутствия this их нельзя использовать с new. Стрелочные функции не могут быть функциями-конструкторами.

// 34. Что такое и для чего используют IIFE (Immediately Invoked Function Expression)?
// IIFE - выражение, которое выполняется немедленно при объявлении. состоит из двух основных частей. Первая - это сама анонимная функция, которая выполняется немедленно при объявлении. Вторая - это возвращаемое значение анонимной функции.
// Пример: (function() { return 'Hello'; } )();

// 35. Что такое hoisting, как он работает для переменных и функций?
// Hoisting - перемещение объявлений в начало кода. Переменные и функции перемещаются в начало кода, поэтому они могут быть использованы до их объявления. Пример: Console.log(a); Переменная a будет объявлена в начале кода, а значение будет просто присвоено переменной. Пример: function func() { return 'Hello'; } Функция будет объявлена в начале кода, а значение будет просто присвоено переменной.



// Front-end

// 42. Что такое DOM?
// DOM - объектно-ориентированный интерфейс для работы с документом. Он предоставляет доступ к всему содержимому документа, включая его стили, содержимое, структуру и прочее. Он предоставляет доступ к всему содержимому документа, включая его стили, содержимое, структуру и прочее.

// 43. Сравните атрибуты подключения скрипта async и defer.
// async - позволяет отложить загрузку скрипта до момента полной загрузки страницы. Пример: <script src="script.js" async></script>

// 44. Какая разница между свойствами HTML-элементов innerHTML и innerText?
// innerHTML - позволяет получить или установить внутренний текст элемента. Пример: <div id="div1" innerHTML="Hello"></div>

// 45. Опишите процесс всплытия (bubbling) событий в DOM.
// Событие всплывает в дереве DOM и последовательно передается в верхние элементы. Пример: <div id="div1" onclick="alert('Hello')"></div> <div id="div2" onclick="alert('Hello')"></div> 
// При нажатии на элемент div1 выведется сообщение Hello. При нажатии на элемент div2 ничего не произойдет.

// 46. Как остановить всплытие (bubbling) события?
// Событие останавливается при помощи свойства stopPropagation. 

// 47. Как остановить дефолтную обработку события?
// Событие останавливается при помощи свойства preventDefault.

// 48. Чему равен this в обработчике событий (event handler)?
// В обработчике событий this указывает на текущий элемент, на котором произошло событие.

// 49. Что такое LocalStorage и SessionStorage? Какой максимальный размер LocalStorage?
// LocalStorage - локальное хранилище, которое хранится в браузере пользователя. Максимальный размер локального хранилища ограничен веб-браузером. Пример: localStorage.setItem('key', 'value');
// SessionStorage - локальное хранилище, которое хранится в браузере пользователя. Максимальный размер локального хранилища ограничен веб-браузером. Пример: sessionStorage.setItem('key', 'value');

// 50. Как получить высоту блока? Его положение относительно границ документа?
// Высота блока можно получить с помощью свойства offsetHeight. Положение относительно границ документа можно получить с помощью свойства getBoundingClientRect. Пример: <div id="div1" style="height: 100px;"></div>

// 51. Что такое webpack?
// webpack - это программа, которая позволяет объединять все модули в один файл. Пример: webpack --mode production --entry ./src/index.js --output ./dist/bundle.js

// 52. Чем отличается dev-сборник от prod?
// В dev-сборнике модули объединяются в один файл, а в prod-сборнике модули объединяются в один файл и отдельные модули объединяются в отдельные файлы. Пример: webpack --mode production --entry ./src/index.js --output ./dist/bundle.js
 

// Верстка

// 53. Что такое блочная модель CSS?
// Блочная модель CSS - это модель верстки, которая определяет как будет выглядеть веб-страница. Пример: <div id="div1" style="height: 100px;"></div>

// 54. Какие способы центрирования блочного контента по горизонтали и вертикали знаете?
// Центрирование по горизонтали можно получить с помощью свойства text-align. Пример: <div id="div1" style="text-align: center;"></div> Центрирование по вертикали можно получить с помощью свойства vertical-align. Пример: <div id="div1" style="vertical-align: middle;"></div>

// 55. Какие подходы в верстке вам известны (float, flex, grid, etc.)?
// Подходы в верстке вам известны - float, flex, grid, etc. Пример: <div id="div1" style="float: left;"></div>

// 56. Как сделать приложение responsive?
// Приложение responsive можно сделать с помощью подхода media queries. Пример: <div id="div1" style="height: 100px;"></div>

// 57. Какие есть принципы семантической верстки?

// 58. Зачем нужны префиксы для некоторых CSS-свойств (-webkit-, -moz- и т. д.)?

// 59. Как упростить написание кросс-браузерных стилей?

// 60. пример плохого CSS кода.
// Пример плохого CSS кода: <div id="div1" style="height: 100px;"></div>

// 61. Что такое CSS-препроцессоры? С какими работали? Что нового они приносят в стандартный CSS?
// пример кода SCSS.


// React

// 95. Классовые компоненты. В чем их особенность?
// Классовые компоненты - это компоненты, которые наследуются от React.Component. Пример: class App extends React.Component {render() {return <div>Hello World</div>}}

// 96. Какие данные лучше хранить в состоянии компонента, а какие передавать через пропсы?


// Frontend Developer
 
// Верстальщик сайтов
// 97. Ознакомлены ли вы с хуками? В чем их преимущества? Приходилось ли делать свои и с какой целью?

// 98. Знакомы ли вы с фрагментами и порталами? Зачем они нужны?

// 99. Когда и для чего используют рефы?

// 100. методы жизненного цикла компонента?

// 101. В каком методе жизненного цикла компонента лучше делать запросы на сервер? Почему?

// 102. В каком методе жизненного цикла компонента лучше делать подписку и отписку от листенера? Почему? Зачем отписываться?

// 103. Был ли опыт работы с контекстом? Когда его стоит использовать?

// 104. В чем особенность PureComponent?

// 105. Работали ли вы с мемоизоваными селекторами (memoized selectors)? Для чего их используют и какой принцип работы?

// 106. В чем видите преимущества библиотеки React?

// 107. Почему библиотека React быстрая? Что такое Virtual DOM и Shadow DOM?

// 108. Зачем в списках ключи? Можно ли делать ключами индексы элементов массива? Когда это оправдано?

// 109. В чем основная идея Redux?

// 110. Работа со стилями в React.

// 111. React - это библиотека или фреймворк? Какая разница между этими двумя понятиями.

// 112. Можно ли использовать jQuery вместе с React? Почему да / нет?

// 113. Что такое codemod?

// 114. Приходилось ли вам настраивать проект React с нуля? С помощью каких инструментов вы это делали?

// 115. Перечислите все библиотеки, которые использовали в связке с React.

// 116. Что самое сложное вам приходилось реализовывать с помощью React?
 